1. Java 1.0 (1996)
Primeira versão do Java, focada na portabilidade através da JVM (Java Virtual Machine), permitindo que o código fosse executado em diferentes plataformas. Introdução da biblioteca padrão básica.

2. Java 1.1 (1997)
Introduziu recursos como JavaBeans (componentes reutilizáveis), RMI (Remote Method Invocation) para comunicação entre máquinas, e suporte para manipulação de eventos em interfaces gráficas.

3. Java 1.2 (1998) - "Java 2"
Divisão do Java em plataformas: J2SE (Desktop), J2EE (Enterprise) e J2ME (Mobile). Introdução do Swing (nova biblioteca gráfica) e do Collections Framework.

4. Java 1.3 (2000)
Foco em desempenho e otimização. Introdução do JNDI (Java Naming and Directory Interface) e aprimoramento da API de RMI.

5. Java 1.4 (2002)
Introdução de novos recursos como assertions, NIO (New I/O) para manipulação de arquivos e XML. Melhorias de desempenho e correção de falhas de segurança.

6. Java 5 (2004)
Grande atualização, com mudanças significativas:
- Generics (tipagem genérica).
- Metadata annotations.
- Enums (tipos enumerados).
- Varargs (argumentos variáveis).
- Enhanced for loop.
- Concurrency Utilities (para programação concorrente).

7. Java 6 (2006)
Foco em desempenho e otimização da JVM. Introdução de melhorias em Web Services e novas APIs para compilação dinâmica e deploy de aplicativos.

8. Java 7 (2011)
Adoção de novos recursos, como:
- try-with-resources para fechamento automático de recursos.
- Switch com Strings.
- Fork/Join framework para programação paralela.

9. Java 8 (2014)
Lançamento marcante, com:
- Lambdas (funções anônimas e expressões funcionais).
- Streams API (para processamento funcional de coleções).
- Date/Time API (novo sistema para manipulação de data e hora).
- Default methods em interfaces.

10. Java 9 (2017)
Introdução do module system (para modularização do código) e melhorias no JVM. Lançamento de novos recursos como o JShell, uma ferramenta interativa para testar código Java.

11. Java 10 (2018)
Foco em melhorias de desempenho, como o Local-Variable Type Inference (introdução do var), e melhorias na coleta de lixo com o Garbage Collector.

12. Java 11 (2018)
Versão LTS (Long Term Support), trazendo:
- Remoção de APIs antigas.
- Novos recursos para HTTP e compilação em modo JIT.

13. Java 12 (2019)
Melhorias na JVM e no garbage collector. Introdução do JEP 189 (comando de empacotamento de código em imagens nativas).

14. Java 13 (2019)
Introdução do Text Blocks (para strings multilinhas) e melhorias no garbage collector.

15. Java 14 (2020)
Introdução de novos recursos experimentais, como o JEP 359 (com suporte a records - uma nova forma de declarar classes imutáveis) e melhorias na JVM.

16. Java 15 (2020)
Introdução de Selda Records e Sealed Classes (para controle de herança de classes).

17. Java 16 (2021)
Foco em desempenho e melhorias no JVM. Introdução do JEP 394 (remover a segurança de inicialização antecipada).

18. Java 17 (2021)
Versão LTS com novos recursos como pattern matching e records, além de melhorias no desempenho do garbage collection e otimizações gerais. É uma versão de longo suporte, recomendada para produção.

19. Java 18 (2022)
Introdução de novas funcionalidades experimentais, como JEP 400 (UTF-8 padrão no sistema) e melhorias no garbage collection.

20. Java 19 (2022)
Melhorias no pattern matching e no record API.

21. Java 20 (2023)
Continuação das melhorias em recursos de desempenho e JVM, além de novas ferramentas para desenvolvimento modular e avaliações experimentais.

22. Java 21 (2023)
Versão LTS mais recente, trazendo melhorias no desempenho, reclusão de classes e novos recursos relacionados à concorrência e integração com a JVM.

